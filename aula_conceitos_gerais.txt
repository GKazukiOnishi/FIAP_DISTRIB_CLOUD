Conceitos Gerais

	Middleware
		Sistemas distribuídos são vários componentes conectados, mas para o usuários isso é transparente, os usuários usam ele independente de
			onde a interação ocorra
		Para ser capaz de suportar esses componentes heterogênos, eles se organizam por meio de uma camada intermediária
		Essa camada é o Middleware
		
		Situada entre a camada da aplicação e do sistema operacional
	
		Esse middleware se estende por várias máquinas, oferecendo a mesma interface para eles
	
	Metas de um sistema distribuído:
		* Oferecer fácil acesso a seus recursos.
		* Ocultar razoavelmente bem o fato de que os recursos estão distribuídos por uma rede.
		* Ser aberto.
		* Poder ser expandido.

	Acesso aos recursos:
		Facilitar o acesso aos recursos remotos e seu compartilhamento de forma controlada e eficiente
		
		Impressoras, discos RAID com SCSI, bases de dados, páginas web -> exemplos de recursos
		
		Com a conectividade da internet, grupos de pessoas dispersas geograficamente conseguem trabalhar juntos (groupware -> software colaborativo)
	Abertura:
		Os sistemas distribuídos oferecem serviços seguindo regras e sintaxes padronizadas, geralmente especificadas em interfaces
		IDL -> Interface Definition Language
			Ofere notações para definir interfaces
			E os sistemas operacionais e/ou linguagens de programação diferentes, usando essa interface, conseguem se comunicar (ponte)
		Completa e Neutra -> define completamente, mas não prescreve sua implementação
		Interoperabilidade:
			Quando componentes diferentes de implementações diferentes conseguem se comunicar entre si seguindo uma interface em comum
		Portabilidade:
			Quando ao trocar a implementação por alguma outra, a aplicação continua funcionando por seguir a mesma interface
	Escalabilidade:
		Deve ser fácil adicionar novos componentes ou substituir sem afetar os demais componentes.
		Deve ser extensível.
		medido em três dimensões:
			* Tamanho: Fácil adicionar mais usuários/recursos ao sistema
			* Geográfico: Usuários e recursos podem estar longes um dos outros
			* Administrativos: Fácil de gerenciar mesmo que envolva muitas organizações adminsitrativas diferentes
	Transparência da Distribuição:
		Funciona como um único sistema ao usuário
		
		* Acesso: Oculta as diferenças na representação dos dados ou modo como os recursos podem ser acessados.
			Mesmo sendo SOs diferentes, arquiteturas diferentes etc., ele funciona de forma transparente
			Ao representar um inteiro com 32bits, temos ordem diferentes, por exemplo:
				0A0B0C0D
				* Little-endian - Byte mais significativo por último na posição de memória -> .Net, Intel
					a a+1 a+2 a+3
					0D 0C 0B 0A
				* Big-endian - Byte mais significativo primeiro na posição de memória -> JVM, camada de enlace de redes
					a a+1 a+2 a+3
					0A 0B 0C 0D
			Imagens tem dois tipos de representação:
				* Raster - Pixeis individuais que combinados formam a imagem
				* Vetorias - Fórmulas matemáticas que remontam a imagem
		* Localização: Usuários não sabem onde está o sistema, sabe o nome, mas não onde está, qual é
		* Transparência de migração: Pode movimentar o recurso que o usuário não percebe
		* Transparência de relocação: recursos podem ser relocados e o usuário nem percebe (ex: wifi trocando sem vc perceber enquanto anda)
		* Transparência de replicação: Podem existir várias cópias de um mesmo recurso para ter maior disponibilidade, possuem o mesmo nome, mas são diferentes
		* Transparência de concorrência: Mais de um usuário pode usar o mesmo recurso sem perceber a existência do outro
		* Transparência a falha: Se um componente falha, o sistema se recupera e você nem percebe.
			Mascarar falhas é difícil, porque usuários não sabem diferenciar um recurso morte de um lento
			
		
	
	
	
	
	
	
		
		